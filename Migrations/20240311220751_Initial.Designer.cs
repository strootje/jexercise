// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using jexercise;

#nullable disable

namespace jexercise.Migrations
{
    [DbContext(typeof(JexContext))]
    [Migration("20240311220751_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("jexercise.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jex"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Koekela"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bar 3"
                        });
                });

            modelBuilder.Entity("jexercise.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobOffers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Description = "Turn Code into Coffee",
                            Title = "Software Engineer"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            Description = "Turn Cake into Coffee",
                            Title = "Cake Engineer"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            Description = "Feed the children of Rotterdam",
                            Title = "CEO"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 3,
                            Description = "Lekker biertjes tappen",
                            Title = "Bier Tapper"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 3,
                            Description = "Spelen in een sopje",
                            Title = "Afwasser"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 2,
                            Description = "Uitkijken met die hobbels",
                            Title = "Fietscourier"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 1,
                            Description = "Turn food for children into Tests",
                            Title = "Test Engineer"
                        });
                });

            modelBuilder.Entity("jexercise.Company", b =>
                {
                    b.OwnsOne("jexercise.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("TEXT");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.HasData(
                                new
                                {
                                    CompanyId = 1,
                                    City = "Rotterdam",
                                    Country = "Netherlands",
                                    Street = "Nassaukade 5",
                                    Zipcode = "3071 JL"
                                },
                                new
                                {
                                    CompanyId = 2,
                                    City = "Rotterdam",
                                    Country = "Netherlands",
                                    Street = "Nieuwe Binnenweg 79a",
                                    Zipcode = "3014 GB"
                                },
                                new
                                {
                                    CompanyId = 3,
                                    City = "Rotterdam",
                                    Country = "Netherlands",
                                    Street = "",
                                    Zipcode = "3014 GE"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("jexercise.JobOffer", b =>
                {
                    b.HasOne("jexercise.Company", "Company")
                        .WithMany("JobOffers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("jexercise.Company", b =>
                {
                    b.Navigation("JobOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
